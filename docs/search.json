[
  {
    "objectID": "essential-regular-expressions.html",
    "href": "essential-regular-expressions.html",
    "title": "STT127: Essential Regular Expressions for Data Cleaning",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "essential-regular-expressions.html#reading-tasks",
    "href": "essential-regular-expressions.html#reading-tasks",
    "title": "STT127: Essential Regular Expressions for Data Cleaning",
    "section": "Reading Tasks",
    "text": "Reading Tasks\nIn the following order, understand the contents by reading and running the codes within the tutorials. You have 2 hours to do all these.\n\nChapter 14: Strings of H. Wickham’s book R for Data Science (2ed)\nChapter 15: Regular Expressions of H. Wickham’s book R for Data Science (2ed)\nRegular Expressions vignette of stringr from CRAN."
  },
  {
    "objectID": "essential-regular-expressions.html#problems",
    "href": "essential-regular-expressions.html#problems",
    "title": "STT127: Essential Regular Expressions for Data Cleaning",
    "section": "Problems",
    "text": "Problems\n\nPROBLEM_1 &lt;- 'https://www.kaggle.com https://www.google.com https://www.wikipedia.com'\nPROBLEM_2 &lt;- '123, 012410, 01010, , 000, 111, 3495873, 3, not a number!, ...!@$,.'\nPROBLEM_3 &lt;- 'Looking for many endings? You should only be seeing one match.'\nPROBLEM_4 &lt;- 'Count the number of words in this sentence with at least five characters.'\nPROBLEM_5 &lt;- 'Extract these two normally formatted phone numbers from this sentence: (123) 456 7890, 123-456-7890.'\nPROBLEM_6 &lt;- '1234567890'\nPROBLEM_7 &lt;- \"An email address (imaginaryperson@imaginarymail.edu) in a sentence. Don't match Invalid_email@invalid.\"\nPROBLEM_8 &lt;- \"This is not a name, but Harry is. So is Susy. Sam should be missed as it's the first word in the sentence.\"\nPROBLEM_9 &lt;- \"https://www.kaggle.com https://www.google.com https://www.wikipedia.com http://phishing.com not.a.url gibberish41411 http https www.com\"\nPROBLEM_10 &lt;- \"Weird whitespace   issues\\t\\t\\t can be\\n\\n annoying.\"\n\nPHONE_FIELD_ENTRIES = paste0(c(\n    \"1111111111\",\n    \"222 222 2222\",\n    \"333.333.3333\",\n    \"(444) 444-4444\",\n    \"Whitespace duplications can be hard to spot manually  555  555  5555 \",\n    \"Weird whitespace formats are still valid 666\\t666\\t6666\",\n    \"Two separate phone numbers in one field 777.777.7777, 888 888 8888\",\n    \"A common typo plus the US country code +1 999..999.9999\",\n    \"Not a phone number, too many digits 1234567891011\",\n    \"Not a phone number, too few digits 123.456\",\n    \"Not a phone number, nine digits (123) 456-789\")\n                                   ,collapse = '\\n\\n')\n\n# cat(PHONE_FIELD_ENTRIES)\n\n\nWarmup problems:\nYou can test each problem in this section with the strings named like PROBLEM_1, PROBLEM_2 etc. Try writing your first draft regex for each problem without looking at the problem input; this will help you practice for cases where the inputs are too large to review the edge cases manually.\n\nExtract the domain name from these simple urls, which always start with http and end with .com.\n\nHint: the match any character metacharacter will be very helpful here.\n\nWrite a pattern that will returns numbers containing no zeros or ones.\n\nHint: you can solve this with a pattern just seven characters long with the word boundary special character and a custom character class.\n\nWrite a pattern to count the number of sentences that end with a word ending in ‘ing’ or ‘ings’.\n\nHint: if you find that you’re matching more items than expected, try a regex tester like str_view so you can visualize exactly what’s going wrong.\n\nCount the number of words in this sentence with at least five characters.\nExtract the two phone numbers from this sentence.\nRe-write the pattern ‘\\d{3}(?=\\d{7})’ so that it returns everything in the phone number except for the area code.\nWrite a pattern to extract the domain name from an email address in a string. For this sentence, notreal@notmail.com should return ‘notmail’.\nIdentify all of words that look like names in the sentence. In other words, those which are capitalized but aren’t the first word in the sentence.\nFind the valid urls that use http instead of https.\nTidy up the weird whitespace problems with the problem’s sentence.\n\n\n\nAdvanced Exercises\n\nExtract all of the valid phone numbers from the string PHONE_FIELD_ENTRIES. You should get one phone number for each of the numbers 1-9. This one may be easier if you tackle it in stages.\nExtract the date ranges from the description field in this dataset’s documentation file. (NOTE: You can download the same data from our google drive under the folder data-ranges.)\n\nread.csv('stt127-data-sept-18-2024/data-ranges/data.csv')\n\nIdentify the people who contributed to books in this library collections dataset. You can find the relevant data in the Title column of the Library_Collection_Inventory.csv. (NOTE: You can download the same data from our google drive under the folder library-collection.)\n\nread.csv('stt127-data-sept-18-2024/library-collection/Library_Collection_Inventory.csv')"
  }
]